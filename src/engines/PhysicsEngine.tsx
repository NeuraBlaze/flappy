/**
 * ========================================
 * PHASE 1: CORE SYSTEM COMPONENTS
 * ========================================
 * 
 * PhysicsEngine.tsx - Fizika sz√°m√≠t√°sok (gravit√°ci√≥, √ºtk√∂z√©s)
 * 
 * FUNKCI√ìK:
 * - Gravit√°ci√≥ sz√°m√≠t√°sok
 * - Mozg√°s fizika (sebess√©g, gyorsul√°s)
 * - √útk√∂z√©s detekt√°l√°s (AABB, k√∂r-k√∂r, k√∂r-t√©glalap)
 * - Fizikai konstansok kezel√©se
 * - Mad√°r fizika (ugr√°s, es√©s)
 */

import { useRef, useCallback } from 'react';

// ===== üîµ COLLISION SHAPES =====
export interface CircleCollider {
  x: number;
  y: number;
  radius: number;
}

export interface RectCollider {
  x: number;
  y: number;
  width: number;
  height: number;
}

export interface Point {
  x: number;
  y: number;
}

export interface Vector2D {
  x: number;
  y: number;
}

// ===== üê¶ BIRD PHYSICS =====
export interface BirdPhysics {
  x: number;
  y: number;
  vy: number;        // f√ºgg≈ëleges sebess√©g
  vx?: number;       // v√≠zszintes sebess√©g (opcion√°lis)
  radius: number;
  grounded: boolean;
}

// ===== ‚öñÔ∏è PHYSICS CONSTANTS =====
export interface PhysicsConstants {
  gravity: number;
  jumpPower: number;
  maxFallSpeed: number;
  airResistance: number;
  groundFriction: number;
}

// ===== üéØ PHYSICS ENGINE HOOK =====
export const usePhysicsEngine = () => {
  // Fizikai konstansok
  const constants = useRef<PhysicsConstants>({
    gravity: 0.119,      // alap√©rtelmezett gravit√°ci√≥
    jumpPower: -3.83,    // alap√©rtelmezett ugr√°s er≈ë
    maxFallSpeed: 8.0,   // maximum es√©si sebess√©g
    airResistance: 0.99, // leveg≈ë ellen√°ll√°s
    groundFriction: 0.8  // f√∂ldi s√∫rl√≥d√°s
  });

  // ===== üîÑ MOVEMENT PHYSICS =====
  
  /**
   * Mad√°r fizika update-je
   */
  const updateBirdPhysics = useCallback((
    bird: BirdPhysics, 
    deltaTime: number, 
    worldHeight: number,
    groundHeight: number = 50
  ): BirdPhysics => {
    const newBird = { ...bird };
    const dt = deltaTime / 16.67; // normaliz√°ljuk 60 FPS-re
    
    // Gravit√°ci√≥ alkalmaz√°sa
    if (!newBird.grounded) {
      newBird.vy += constants.current.gravity * dt;
      
      // Maximum es√©si sebess√©g korl√°toz√°s
      if (newBird.vy > constants.current.maxFallSpeed) {
        newBird.vy = constants.current.maxFallSpeed;
      }
    }
    
    // Leveg≈ë ellen√°ll√°s
    newBird.vy *= constants.current.airResistance;
    
    // Poz√≠ci√≥ update
    newBird.y += newBird.vy * dt;
    
    // V√≠zszintes mozg√°s (ha van)
    if (newBird.vx !== undefined) {
      newBird.x += newBird.vx * dt;
    }
    
    // F√∂ld √ºtk√∂z√©s ellen≈ërz√©s
    const groundY = worldHeight - groundHeight;
    if (newBird.y + newBird.radius >= groundY) {
      newBird.y = groundY - newBird.radius;
      newBird.vy *= -0.5; // visszapattan√°s
      newBird.grounded = true;
      
      // F√∂ldi s√∫rl√≥d√°s
      if (newBird.vx !== undefined) {
        newBird.vx *= constants.current.groundFriction;
      }
    } else {
      newBird.grounded = false;
    }
    
    // Fels≈ë hat√°r ellen≈ërz√©s
    if (newBird.y - newBird.radius < 0) {
      newBird.y = newBird.radius;
      newBird.vy = Math.max(0, newBird.vy); // meg√°ll√≠tjuk a felfel√© mozg√°st
    }
    
    return newBird;
  }, []);

  /**
   * Mad√°r ugr√°sa
   */
  const jumpBird = useCallback((bird: BirdPhysics, jumpMultiplier: number = 1.0): BirdPhysics => {
    return {
      ...bird,
      vy: constants.current.jumpPower * jumpMultiplier,
      grounded: false
    };
  }, []);

  // ===== üí• COLLISION DETECTION =====
  
  /**
   * K√∂r-k√∂r √ºtk√∂z√©s detekt√°l√°s
   */
  const circleCircleCollision = useCallback((c1: CircleCollider, c2: CircleCollider): boolean => {
    const dx = c1.x - c2.x;
    const dy = c1.y - c2.y;
    const distance = Math.sqrt(dx * dx + dy * dy);
    return distance < (c1.radius + c2.radius);
  }, []);

  /**
   * K√∂r-t√©glalap √ºtk√∂z√©s detekt√°l√°s
   */
  const circleRectCollision = useCallback((circle: CircleCollider, rect: RectCollider): boolean => {
    // Legk√∂zelebbi pont a t√©glalapban a k√∂rh√∂z k√©pest
    const closestX = Math.max(rect.x, Math.min(circle.x, rect.x + rect.width));
    const closestY = Math.max(rect.y, Math.min(circle.y, rect.y + rect.height));
    
    // T√°vols√°g a k√∂r k√∂z√©ppontja √©s a legk√∂zelebbi pont k√∂z√∂tt
    const dx = circle.x - closestX;
    const dy = circle.y - closestY;
    const distance = Math.sqrt(dx * dx + dy * dy);
    
    return distance <= circle.radius;
  }, []);

  /**
   * AABB (Axis-Aligned Bounding Box) √ºtk√∂z√©s detekt√°l√°s
   */
  const aabbCollision = useCallback((rect1: RectCollider, rect2: RectCollider): boolean => {
    return rect1.x < rect2.x + rect2.width &&
           rect1.x + rect1.width > rect2.x &&
           rect1.y < rect2.y + rect2.height &&
           rect1.y + rect1.height > rect2.y;
  }, []);

  /**
   * Pont-k√∂r √ºtk√∂z√©s detekt√°l√°s
   */
  const pointCircleCollision = useCallback((point: Point, circle: CircleCollider): boolean => {
    const dx = point.x - circle.x;
    const dy = point.y - circle.y;
    const distance = Math.sqrt(dx * dx + dy * dy);
    return distance <= circle.radius;
  }, []);

  /**
   * Pont-t√©glalap √ºtk√∂z√©s detekt√°l√°s
   */
  const pointRectCollision = useCallback((point: Point, rect: RectCollider): boolean => {
    return point.x >= rect.x &&
           point.x <= rect.x + rect.width &&
           point.y >= rect.y &&
           point.y <= rect.y + rect.height;
  }, []);

  // ===== üìê PHYSICS UTILITIES =====
  
  /**
   * T√°vols√°g sz√°m√≠t√°s k√©t pont k√∂z√∂tt
   */
  const distance = useCallback((p1: Point, p2: Point): number => {
    const dx = p1.x - p2.x;
    const dy = p1.y - p2.y;
    return Math.sqrt(dx * dx + dy * dy);
  }, []);

  /**
   * Vektor normaliz√°l√°s
   */
  const normalizeVector = useCallback((vector: Vector2D): Vector2D => {
    const length = Math.sqrt(vector.x * vector.x + vector.y * vector.y);
    if (length === 0) return { x: 0, y: 0 };
    return {
      x: vector.x / length,
      y: vector.y / length
    };
  }, []);

  /**
   * Vektor forgat√°s radianban
   */
  const rotateVector = useCallback((vector: Vector2D, angle: number): Vector2D => {
    const cos = Math.cos(angle);
    const sin = Math.sin(angle);
    return {
      x: vector.x * cos - vector.y * sin,
      y: vector.x * sin + vector.y * cos
    };
  }, []);

  /**
   * Line√°ris interpol√°ci√≥
   */
  const lerp = useCallback((start: number, end: number, factor: number): number => {
    return start + (end - start) * factor;
  }, []);

  // ===== ‚öôÔ∏è PHYSICS CONFIGURATION =====
  
  const updatePhysicsConstants = useCallback((newConstants: Partial<PhysicsConstants>) => {
    constants.current = { ...constants.current, ...newConstants };
  }, []);

  const getPhysicsConstants = useCallback(() => constants.current, []);

  const resetPhysicsConstants = useCallback(() => {
    constants.current = {
      gravity: 0.119,
      jumpPower: -3.83,
      maxFallSpeed: 8.0,
      airResistance: 0.99,
      groundFriction: 0.8
    };
  }, []);

  // ===== üöÄ PHYSICS ENGINE INTERFACE =====
  return {
    // Bird physics
    updateBirdPhysics,
    jumpBird,
    
    // Collision detection
    circleCircleCollision,
    circleRectCollision,
    aabbCollision,
    pointCircleCollision,
    pointRectCollision,
    
    // Physics utilities
    distance,
    normalizeVector,
    rotateVector,
    lerp,
    
    // Configuration
    constants: constants.current,
    updatePhysicsConstants,
    getPhysicsConstants,
    resetPhysicsConstants
  };
};

// ===== üîß PHYSICS HELPERS =====

/**
 * Egyszer≈± mad√°r objektum l√©trehoz√°sa
 */
export const createBird = (x: number, y: number, radius: number = 12): BirdPhysics => ({
  x,
  y,
  vy: 0,
  radius,
  grounded: false
});

/**
 * K√∂r collider l√©trehoz√°sa
 */
export const createCircleCollider = (x: number, y: number, radius: number): CircleCollider => ({
  x, y, radius
});

/**
 * T√©glalap collider l√©trehoz√°sa
 */
export const createRectCollider = (x: number, y: number, width: number, height: number): RectCollider => ({
  x, y, width, height
});

export default usePhysicsEngine;